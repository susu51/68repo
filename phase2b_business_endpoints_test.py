#!/usr/bin/env python3
"""
Phase 2B: Real MongoDB Integration - New Business API Endpoints Testing

Test Coverage:
1. GET /api/business/orders/incoming - Test with approved business account
2. GET /api/business/orders/active - Test active orders retrieval  
3. GET /api/business/stats - Test real statistics calculation from orders
4. GET /api/business/financials - Test real financial data from delivered orders
5. POST /api/payments/process - Test real payment processing endpoint

Authentication Details:
- Business: testbusiness@example.com / test123 (KYC approved)
- Customer: testcustomer@example.com / test123

Expected Results:
‚úÖ Business orders endpoints return actual order data or empty arrays
‚úÖ Statistics calculated from real order data in database
‚úÖ Financial calculations based on actual delivered orders
‚úÖ Payment processing creates proper database records
‚úÖ All endpoints properly authenticated with business/customer roles
"""

import requests
import json
import time
import random
from datetime import datetime, timezone

# Configuration
BACKEND_URL = "https://admin-wsocket.preview.emergentagent.com/api"

# Test credentials
BUSINESS_EMAIL = "testbusiness@example.com"
BUSINESS_PASSWORD = "test123"
CUSTOMER_EMAIL = "testcustomer@example.com"
CUSTOMER_PASSWORD = "test123"

class Phase2BBusinessTester:
    def __init__(self):
        self.session = requests.Session()
        self.business_token = None
        self.customer_token = None
        self.business_user = None
        self.customer_user = None
        self.test_results = []
        
    def log_test(self, test_name, success, details="", error=""):
        """Log test results"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "error": error,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status}: {test_name}")
        if details:
            print(f"   Details: {details}")
        if error:
            print(f"   Error: {error}")
        print()

    def authenticate_business(self):
        """Authenticate as business user"""
        print("üè™ AUTHENTICATING BUSINESS USER...")
        
        try:
            login_data = {
                "email": BUSINESS_EMAIL,
                "password": BUSINESS_PASSWORD
            }
            
            response = self.session.post(f"{BACKEND_URL}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.business_token = data.get("access_token")
                self.business_user = data.get("user", {})
                
                if self.business_token:
                    self.log_test("Business Authentication", True, 
                                f"Successfully authenticated business user, token length: {len(self.business_token)}, Business ID: {self.business_user.get('id', 'N/A')}")
                    return True
                else:
                    self.log_test("Business Authentication", False, "No access token in response")
            else:
                self.log_test("Business Authentication", False, 
                            f"Login failed with status {response.status_code}: {response.text}")
                
        except Exception as e:
            self.log_test("Business Authentication", False, f"Authentication error: {str(e)}")
        
        return False

    def authenticate_customer(self):
        """Authenticate as customer user"""
        print("üë§ AUTHENTICATING CUSTOMER USER...")
        
        try:
            login_data = {
                "email": CUSTOMER_EMAIL,
                "password": CUSTOMER_PASSWORD
            }
            
            response = self.session.post(f"{BACKEND_URL}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.customer_token = data.get("access_token")
                self.customer_user = data.get("user", {})
                
                if self.customer_token:
                    self.log_test("Customer Authentication", True, 
                                f"Successfully authenticated customer user, token length: {len(self.customer_token)}, Customer ID: {self.customer_user.get('id', 'N/A')}")
                    return True
                else:
                    self.log_test("Customer Authentication", False, "No access token in response")
            else:
                self.log_test("Customer Authentication", False, 
                            f"Login failed with status {response.status_code}: {response.text}")
                
        except Exception as e:
            self.log_test("Customer Authentication", False, f"Authentication error: {str(e)}")
        
        return False

    def test_business_orders_incoming(self):
        """Test GET /api/business/orders/incoming endpoint"""
        print("\nüì• TESTING BUSINESS INCOMING ORDERS ENDPOINT")
        
        if not self.business_token:
            self.log_test("GET /api/business/orders/incoming", False, "No business authentication token available")
            return
        
        try:
            headers = {"Authorization": f"Bearer {self.business_token}"}
            response = self.session.get(f"{BACKEND_URL}/business/orders/incoming", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                orders = data.get("orders", []) if isinstance(data, dict) else data
                
                # Verify response structure
                if isinstance(orders, list):
                    self.log_test("GET /api/business/orders/incoming", True, 
                                f"Retrieved incoming orders successfully, count: {len(orders)}, data type: {type(orders)}")
                    
                    # Check if orders have expected structure
                    if orders:
                        sample_order = orders[0]
                        expected_fields = ['id', 'customer_name', 'items', 'total_amount', 'status']
                        has_structure = all(field in sample_order for field in expected_fields)
                        print(f"   Order structure validation: {'‚úÖ' if has_structure else '‚ùå'}")
                        print(f"   Sample order fields: {list(sample_order.keys()) if isinstance(sample_order, dict) else 'N/A'}")
                else:
                    self.log_test("GET /api/business/orders/incoming", False, 
                                f"Unexpected response format, expected list but got: {type(orders)}")
                    
            elif response.status_code == 403:
                self.log_test("GET /api/business/orders/incoming", False, 
                            "Access denied - business may not be KYC approved or authentication failed")
            elif response.status_code == 404:
                self.log_test("GET /api/business/orders/incoming", False, 
                            "Endpoint not found - incoming orders API not implemented")
            else:
                self.log_test("GET /api/business/orders/incoming", False, 
                            f"Unexpected response: {response.status_code} - {response.text}")
                
        except Exception as e:
            self.log_test("GET /api/business/orders/incoming", False, f"Request error: {str(e)}")

    def test_business_orders_active(self):
        """Test GET /api/business/orders/active endpoint"""
        print("\nüîÑ TESTING BUSINESS ACTIVE ORDERS ENDPOINT")
        
        if not self.business_token:
            self.log_test("GET /api/business/orders/active", False, "No business authentication token available")
            return
        
        try:
            headers = {"Authorization": f"Bearer {self.business_token}"}
            response = self.session.get(f"{BACKEND_URL}/business/orders/active", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                orders = data.get("orders", []) if isinstance(data, dict) else data
                
                # Verify response structure
                if isinstance(orders, list):
                    self.log_test("GET /api/business/orders/active", True, 
                                f"Retrieved active orders successfully, count: {len(orders)}, data type: {type(orders)}")
                    
                    # Check if orders have expected structure and active statuses
                    if orders:
                        sample_order = orders[0]
                        expected_fields = ['id', 'status', 'customer_name', 'items', 'total_amount']
                        has_structure = all(field in sample_order for field in expected_fields)
                        
                        # Check for active statuses
                        active_statuses = ['confirmed', 'preparing', 'ready', 'picked_up', 'delivering']
                        has_active_status = sample_order.get('status') in active_statuses
                        
                        print(f"   Order structure validation: {'‚úÖ' if has_structure else '‚ùå'}")
                        print(f"   Active status validation: {'‚úÖ' if has_active_status else '‚ùå'} (Status: {sample_order.get('status', 'N/A')})")
                else:
                    self.log_test("GET /api/business/orders/active", False, 
                                f"Unexpected response format, expected list but got: {type(orders)}")
                    
            elif response.status_code == 403:
                self.log_test("GET /api/business/orders/active", False, 
                            "Access denied - business may not be KYC approved or authentication failed")
            elif response.status_code == 404:
                self.log_test("GET /api/business/orders/active", False, 
                            "Endpoint not found - active orders API not implemented")
            else:
                self.log_test("GET /api/business/orders/active", False, 
                            f"Unexpected response: {response.status_code} - {response.text}")
                
        except Exception as e:
            self.log_test("GET /api/business/orders/active", False, f"Request error: {str(e)}")

    def test_business_stats(self):
        """Test GET /api/business/stats endpoint"""
        print("\nüìä TESTING BUSINESS STATS ENDPOINT")
        
        if not self.business_token:
            self.log_test("GET /api/business/stats", False, "No business authentication token available")
            return
        
        try:
            headers = {"Authorization": f"Bearer {self.business_token}"}
            response = self.session.get(f"{BACKEND_URL}/business/stats", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                
                # Check for expected stats structure
                expected_sections = ['today', 'week', 'month']
                expected_metrics = ['orders', 'revenue']
                
                has_sections = any(section in data for section in expected_sections)
                has_metrics = False
                
                if has_sections:
                    # Check if any section has the expected metrics
                    for section in expected_sections:
                        if section in data and isinstance(data[section], dict):
                            section_metrics = all(metric in data[section] for metric in expected_metrics)
                            if section_metrics:
                                has_metrics = True
                                break
                
                self.log_test("GET /api/business/stats", True, 
                            f"Retrieved business stats successfully, has expected structure: {has_sections and has_metrics}")
                
                # Log detailed stats info
                if 'today' in data:
                    today_stats = data['today']
                    print(f"   Today's stats: Orders: {today_stats.get('orders', 'N/A')}, Revenue: {today_stats.get('revenue', 'N/A')}")
                
            elif response.status_code == 403:
                self.log_test("GET /api/business/stats", False, 
                            "Access denied - business may not be KYC approved or authentication failed")
            elif response.status_code == 404:
                self.log_test("GET /api/business/stats", False, 
                            "Endpoint not found - business stats API not implemented")
            else:
                self.log_test("GET /api/business/stats", False, 
                            f"Unexpected response: {response.status_code} - {response.text}")
                
        except Exception as e:
            self.log_test("GET /api/business/stats", False, f"Request error: {str(e)}")

    def test_business_financials(self):
        """Test GET /api/business/financials endpoint"""
        print("\nüí∞ TESTING BUSINESS FINANCIALS ENDPOINT")
        
        if not self.business_token:
            self.log_test("GET /api/business/financials", False, "No business authentication token available")
            return
        
        try:
            headers = {"Authorization": f"Bearer {self.business_token}"}
            response = self.session.get(f"{BACKEND_URL}/business/financials", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                
                # Check for expected financial structure
                expected_fields = ['total_earnings', 'delivered_orders', 'commission_paid', 'pending_payout']
                has_financial_structure = any(field in data for field in expected_fields)
                
                # Alternative structure check
                if not has_financial_structure:
                    # Check for period-based structure
                    period_fields = ['today', 'week', 'month', 'total']
                    has_period_structure = any(field in data for field in period_fields)
                    has_financial_structure = has_period_structure
                
                self.log_test("GET /api/business/financials", True, 
                            f"Retrieved business financials successfully, has expected structure: {has_financial_structure}")
                
                # Log key financial metrics
                if isinstance(data, dict):
                    print(f"   Financial data keys: {list(data.keys())}")
                    
            elif response.status_code == 403:
                self.log_test("GET /api/business/financials", False, 
                            "Access denied - business may not be KYC approved or authentication failed")
            elif response.status_code == 404:
                self.log_test("GET /api/business/financials", False, 
                            "Endpoint not found - business financials API not implemented")
            else:
                self.log_test("GET /api/business/financials", False, 
                            f"Unexpected response: {response.status_code} - {response.text}")
                
        except Exception as e:
            self.log_test("GET /api/business/financials", False, f"Request error: {str(e)}")

    def test_payment_processing(self):
        """Test POST /api/payments/process endpoint"""
        print("\nüí≥ TESTING PAYMENT PROCESSING ENDPOINT")
        
        if not self.customer_token:
            self.log_test("POST /api/payments/process", False, "No customer authentication token available")
            return
        
        try:
            headers = {"Authorization": f"Bearer {self.customer_token}"}
            
            # Create test payment data
            payment_data = {
                "order_id": f"test-order-{int(time.time())}",
                "amount": 45.50,
                "payment_method": "online",
                "customer_id": self.customer_user.get("id", "customer-001"),
                "card_details": {
                    "card_number": "4111111111111111",  # Test card
                    "expiry_month": "12",
                    "expiry_year": "2025",
                    "cvv": "123",
                    "holder_name": "Test Customer"
                }
            }
            
            response = self.session.post(f"{BACKEND_URL}/payments/process", json=payment_data, headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                
                # Check for expected payment response structure
                expected_fields = ['success', 'transaction_id', 'payment_id']
                has_structure = any(field in data for field in expected_fields)
                
                # Check if payment was successful
                payment_success = data.get('success', False) or data.get('status') == 'success'
                
                self.log_test("POST /api/payments/process", True, 
                            f"Payment processing completed, success: {payment_success}, has expected structure: {has_structure}")
                
                # Log payment details
                if 'transaction_id' in data:
                    print(f"   Transaction ID: {data['transaction_id']}")
                if 'payment_id' in data:
                    print(f"   Payment ID: {data['payment_id']}")
                    
            elif response.status_code == 400:
                # Check if it's a validation error (acceptable for test data)
                error_msg = response.text
                if "validation" in error_msg.lower() or "invalid" in error_msg.lower():
                    self.log_test("POST /api/payments/process", True, 
                                f"Payment endpoint working - validation error expected with test data: {error_msg}")
                else:
                    self.log_test("POST /api/payments/process", False, 
                                f"Payment processing failed with validation error: {error_msg}")
            elif response.status_code == 404:
                self.log_test("POST /api/payments/process", False, 
                            "Endpoint not found - payment processing API not implemented")
            else:
                self.log_test("POST /api/payments/process", False, 
                            f"Unexpected response: {response.status_code} - {response.text}")
                
        except Exception as e:
            self.log_test("POST /api/payments/process", False, f"Request error: {str(e)}")

    def test_authentication_security(self):
        """Test authentication and authorization security"""
        print("\nüîê TESTING AUTHENTICATION & AUTHORIZATION SECURITY")
        
        # Test business endpoints without authentication
        endpoints_to_test = [
            "/business/orders/incoming",
            "/business/orders/active", 
            "/business/stats",
            "/business/financials"
        ]
        
        for endpoint in endpoints_to_test:
            try:
                # Test without authentication
                response = self.session.get(f"{BACKEND_URL}{endpoint}")
                
                if response.status_code == 401 or response.status_code == 403:
                    self.log_test(f"Security Test - {endpoint}", True, 
                                f"Properly protected - returns {response.status_code} without authentication")
                elif response.status_code == 404:
                    self.log_test(f"Security Test - {endpoint}", False, 
                                f"Endpoint not found - {endpoint} not implemented")
                else:
                    self.log_test(f"Security Test - {endpoint}", False, 
                                f"SECURITY ISSUE - endpoint accessible without authentication: {response.status_code}")
                    
            except Exception as e:
                self.log_test(f"Security Test - {endpoint}", False, f"Request error: {str(e)}")

    def run_all_tests(self):
        """Run all Phase 2B business endpoint tests"""
        print("üöÄ STARTING PHASE 2B: REAL MONGODB INTEGRATION - BUSINESS API ENDPOINTS TESTING")
        print("=" * 80)
        
        # Authenticate users
        business_auth = self.authenticate_business()
        customer_auth = self.authenticate_customer()
        
        if not business_auth:
            print("\n‚ö†Ô∏è WARNING: Business authentication failed, some tests will be skipped...")
        
        if not customer_auth:
            print("\n‚ö†Ô∏è WARNING: Customer authentication failed, payment tests will be skipped...")
        
        # Run all endpoint tests
        self.test_business_orders_incoming()
        self.test_business_orders_active()
        self.test_business_stats()
        self.test_business_financials()
        self.test_payment_processing()
        self.test_authentication_security()
        
        # Generate summary
        self.generate_summary()

    def generate_summary(self):
        """Generate test summary"""
        print("\n" + "=" * 80)
        print("üìä PHASE 2B: BUSINESS API ENDPOINTS TEST SUMMARY")
        print("=" * 80)
        
        total_tests = len(self.test_results)
        passed_tests = len([t for t in self.test_results if t["success"]])
        failed_tests = total_tests - passed_tests
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"Total Tests: {total_tests}")
        print(f"Passed: {passed_tests}")
        print(f"Failed: {failed_tests}")
        print(f"Success Rate: {success_rate:.1f}%")
        
        print("\nüîç DETAILED RESULTS:")
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status} {result['test']}")
            if result["details"]:
                print(f"    {result['details']}")
        
        # Critical findings
        print("\nüö® CRITICAL FINDINGS:")
        
        # Check for missing endpoints
        missing_endpoints = []
        working_endpoints = []
        auth_issues = []
        
        for result in self.test_results:
            if not result["success"] and "not found" in result["details"].lower():
                missing_endpoints.append(result["test"])
            elif result["success"] and not result["test"].startswith("Security Test"):
                working_endpoints.append(result["test"])
            elif not result["success"] and ("access denied" in result["details"].lower() or 
                                          "authentication" in result["details"].lower()):
                auth_issues.append(result["test"])
        
        if missing_endpoints:
            print(f"‚ùå MISSING ENDPOINTS: {len(missing_endpoints)} critical endpoints not implemented:")
            for endpoint in missing_endpoints:
                print(f"   - {endpoint}")
        
        if working_endpoints:
            print(f"‚úÖ WORKING ENDPOINTS: {len(working_endpoints)} endpoints functioning correctly:")
            for endpoint in working_endpoints:
                print(f"   - {endpoint}")
        
        if auth_issues:
            print(f"üîê AUTHENTICATION ISSUES: {len(auth_issues)} endpoints have auth problems:")
            for issue in auth_issues:
                print(f"   - {issue}")
        
        print(f"\nüìù PHASE 2B CONCLUSION:")
        if success_rate >= 80:
            print("‚úÖ SUCCESS: Phase 2B Real MongoDB Integration is WORKING CORRECTLY")
            print("   Business endpoints returning real data from MongoDB")
            print("   Authentication and authorization properly implemented")
        elif success_rate >= 60:
            print("‚ö†Ô∏è PARTIAL SUCCESS: Phase 2B has some working functionality")
            print("   Some business endpoints working but gaps remain")
        else:
            print("‚ùå CRITICAL: Phase 2B Real MongoDB Integration is NOT READY")
            print("   Major implementation gaps - business endpoints not functional")
        
        print(f"\nüéØ PHASE 2B VERIFICATION STATUS:")
        print(f"   Business Orders Endpoints: {'‚úÖ' if any('orders' in r['test'] and r['success'] for r in self.test_results) else '‚ùå'}")
        print(f"   Business Analytics: {'‚úÖ' if any('stats' in r['test'] and r['success'] for r in self.test_results) else '‚ùå'}")
        print(f"   Financial Data: {'‚úÖ' if any('financials' in r['test'] and r['success'] for r in self.test_results) else '‚ùå'}")
        print(f"   Payment Processing: {'‚úÖ' if any('payments' in r['test'] and r['success'] for r in self.test_results) else '‚ùå'}")
        print(f"   Authentication Security: {'‚úÖ' if any('Security Test' in r['test'] and r['success'] for r in self.test_results) else '‚ùå'}")

if __name__ == "__main__":
    tester = Phase2BBusinessTester()
    tester.run_all_tests()