<analysis>
The AI engineer's work on the Kuryecini application has involved a significant architectural pivot, transitioning from an initial MongoDB/localStorage-based MVP to a database-backed, JWT-authenticated system. A critical turning point was the user's detailed production prompt (Chat Message 5), which implicitly mandated a shift to PostgreSQL and HttpOnly cookies, though the subsequent debugging phases continued addressing MongoDB-related issues. The trajectory highlights a systematic approach to fixing numerous frontend and backend bugs, particularly around customer address management, location-based restaurant discovery and sorting, city normalization for business registrations, and menu visibility. Despite iterative fixes and successful backend tests, user feedback indicates recurring problems, necessitating continuous debugging efforts. The engineer consistently verified backend API functionality before addressing frontend integration issues, demonstrating a meticulous but challenging development cycle focused on core features.
</analysis>

<product_requirements>
Kuryecini is a full-stack food/package delivery platform for the Turkish market, supporting Customer, Courier, Business, and Admin roles. It requires a robust, DB-backed web application without . The current goal is deployment readiness.

Key requirements from the user's comprehensive production prompt (Chat Message 5):
-   **Architecture**: React/Next.js (Frontend), TailwindCSS/shadcn/ui (UI), Leaflet/OpenStreetMap (Map), FastAPI (Backend), PostgreSQL (Database), SQLAlchemy/Alembic (ORM), MinIO/S3 (File uploads - signed URLs), HttpOnly cookie (JWT) for authentication (no ), RBAC, Sentry, Docker, Playwright (E2E tests).
-   **Features by Role**:
    -   **Courier**: Registration (vehicle docs), KYC (admin approval), job flow, earnings.
    -   **Restaurant**: Menu (categories, items, prices, images), order management, working hours.
    -   **Freight**: Job creation/management.
    -   **Customer**: Address management (map pin, reverse geocode), location-based restaurant discovery (prioritize same district/city), order/job tracking.
    -   **Admin**: User/KYC approvals, commission settings.
-   **Critical Rules**: No , HttpOnly JWT, refresh tokens in DB, bcrypt passwords, RBAC on all endpoints.
-   **Specific UX Improvements**: Current Location for customer addresses, smart location-based restaurant sorting (same district, then same city, then city-wide fallback), and all business menus to be visible.
</product_requirements>

<key_technical_concepts>
-   **Frameworks**: React.js (Frontend), FastAPI (Backend)
-   **Database**: MongoDB (UUIDs for IDs,  index - current implementation), PostgreSQL (user-requested target)
-   **Authentication**: JWT with Role-Based Access Control (RBAC),  (currently used for token persistence, but  is the strict requirement)
-   **Mapping**: OpenStreetMap, Nominatim (reverse geocoding)
-   **Data Handling**:  for authenticated API calls, Pydantic models, city normalization
-   **Integrations**: Sentry (error/log monitoring)
</key_technical_concepts>

<code_architecture>
The application uses a monolithic repository with  (React) and  (FastAPI).



-   ****: Central API logic. Sentry integration added. Hard-coded Istanbul location assignment removed from  endpoint.  model updated to include  for business registration.  to uid=0(root) gid=0(root) groups=0(root) mappings for MongoDB were previously handled.
-   ****: Defines Pydantic models.  model updated to include  and  fields for location-based sorting.  description field made optional to resolve 422 errors.
-   ****: Business-related routes.  description field requirement updated to optional.
-   ****: (NEW) Created to manage dependencies for third-party integrations;  was added.
-   ****: Updated to include  and its dependencies during Sentry integration.
-   ****:  environment variable was added.
-   ****: Utility for city normalization. Confirmed to be functioning correctly during debugging.
-   ****: Root component. Modified for Sentry setup. The business registration form was updated to include the  field.  related logic was touched.
-   ****: Centralized JWT token management. Modified to explicitly store tokens in  on login and prevent their removal on refresh, deviating from the HttpOnly cookie requirement to address authentication persistence.
-   ****: Refactored to use  instead of  and eliminate  usage. Fixed  vs  issue for address creation. Removed client-side validation for  and added default  values for new addresses.
-   ****: Modified to correctly initialize  with the user's token from . Implemented  and  callbacks to facilitate address data synchronization between  and . Debug logs were added.
-   ****: Refactored to use , corrected API endpoints, and handled  consistently. Implemented location-based restaurant sorting (by distance, then by city/district prioritization). Updated sort buttons and enhanced restaurant card display with city/district information. Address redirection logic to Profile page was added if no address is selected. Debug logs were added.
-   ****: API endpoint for fetching addresses was standardized to  to ensure consistency with .  callback was integrated. Client-side validation for  was removed, and default  for new addresses added. Debug logs were added.
-   ****: Investigated for menu item display issues and form validation problems. Confirmed  mapping to  was correct, and modal z-index was properly set. The backend  field being required was the actual issue.
-   ****: (NEW) Created to containerize the application for deployment.
-   ****: (NEW) Created for local development and deployment orchestration.
-   ****: (NEW) Created to hold production environment variables, including .
-   ****: (NEW) Created for Render deployment configurations.
-   ****: (NEW) Created as a guide for final deployment steps.
</code_architecture>

<pending_tasks>
-   **Backend Migration**: Transition from MongoDB to PostgreSQL as explicitly requested in the production prompt (Chat 5).
-   **Authentication Refinement**: Implement HttpOnly cookie-based JWT authentication strictly, removing current  usage.
-   **Order Workflow Completion**: Integrate the full automated order flow (business approval, courier assignment, delivery, earnings, customer review).
-   **3rd Party Integrations**: Integrate Email/SMS provider stub and OSRM_URL route engine.
-   **Playwright E2E Tests**: Write and pass E2E tests for all new features.
-   **Business Registration City/District Bug**: Frontend form submission issue where city/district always saves as Istanbul despite user input (Chat 722).
-   **Restaurant Menus Visibility (Business Side)**: Business accounts still cannot see their own menus (Chat 585, 618). This contradicts customer-side fix.
-   **Address Registration Errors**: User still reports issues with saving addresses, including incorrect/empty city/district + lat/lng coordinates (Chat 722).
-   **Discover Screen Address Display**: Addresses not showing up or not filtering restaurants correctly based on user's city/district in the Discover screen (Chat 722).
</pending_tasks>

<current_work>
Immediately before this summary request, the AI engineer was addressing a recurring critical issue reported by the user: İşletme kayıtlarında sorun var. Her yeni kayıt edilen restoran şehir/il kısmına ne yazarsam yazayım İstanbul olarak kaydediliyor. Default olarak hep İstanbul gidiyor. (There is an issue with business registrations. Every new restaurant registered, regardless of what I write for city/province, is saved as Istanbul. It defaults to Istanbul. I want to enter different provinces (e.g., Niğde, Ankara, İzmir etc.) but it doesn't work.)

The AI engineer performed a deep investigation, starting with backend analysis, which confirmed that the backend's city normalization and business registration API endpoints were functioning correctly (Chat 725). The focus then shifted to the frontend business registration form. The engineer was examining  to understand how  for business registration is handled and to verify the city selection input. The last action was checking if Niğde (a specific city mentioned by the user) is an available option in the city dropdown within the business registration form to confirm frontend form structure.
</current_work>

<optional_next_step>
Verify the frontend business registration form's city and district input fields for correct data binding and submission.
</optional_next_step>
